// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaestroServiceClient is the client API for MaestroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaestroServiceClient interface {
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	QueueStats(ctx context.Context, in *QueueStatsRequest, opts ...grpc.CallOption) (*QueueStatsResponse, error)
}

type maestroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaestroServiceClient(cc grpc.ClientConnInterface) MaestroServiceClient {
	return &maestroServiceClient{cc}
}

func (c *maestroServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/MaestroService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maestroServiceClient) QueueStats(ctx context.Context, in *QueueStatsRequest, opts ...grpc.CallOption) (*QueueStatsResponse, error) {
	out := new(QueueStatsResponse)
	err := c.cc.Invoke(ctx, "/MaestroService/QueueStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaestroServiceServer is the server API for MaestroService service.
// All implementations must embed UnimplementedMaestroServiceServer
// for forward compatibility
type MaestroServiceServer interface {
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	QueueStats(context.Context, *QueueStatsRequest) (*QueueStatsResponse, error)
	mustEmbedUnimplementedMaestroServiceServer()
}

// UnimplementedMaestroServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMaestroServiceServer struct {
}

func (UnimplementedMaestroServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedMaestroServiceServer) QueueStats(context.Context, *QueueStatsRequest) (*QueueStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueStats not implemented")
}
func (UnimplementedMaestroServiceServer) mustEmbedUnimplementedMaestroServiceServer() {}

// UnsafeMaestroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaestroServiceServer will
// result in compilation errors.
type UnsafeMaestroServiceServer interface {
	mustEmbedUnimplementedMaestroServiceServer()
}

func RegisterMaestroServiceServer(s grpc.ServiceRegistrar, srv MaestroServiceServer) {
	s.RegisterService(&MaestroService_ServiceDesc, srv)
}

func _MaestroService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaestroServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MaestroService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaestroServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaestroService_QueueStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaestroServiceServer).QueueStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MaestroService/QueueStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaestroServiceServer).QueueStats(ctx, req.(*QueueStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaestroService_ServiceDesc is the grpc.ServiceDesc for MaestroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaestroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MaestroService",
	HandlerType: (*MaestroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _MaestroService_CreateTask_Handler,
		},
		{
			MethodName: "QueueStats",
			Handler:    _MaestroService_QueueStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/maestro.proto",
}
